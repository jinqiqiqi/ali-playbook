---
# tasks file for roles/php5

- name: Install php dependencies
  package:
    name="{{ item }}" state="present"
  loop:
    - gcc
    - libxml2-devel
    - openssl-devel
    - libzip-devel
    - bzip2-devel
    - libcurl-devel
    - libjpeg-turbo-devel
    - libpng-devel
    # - libpng12-devel
    - freetype-devel
    - libicu-devel
    - gcc-c++
    - libmcrypt-devel
    - autoconf
    - re2c
    - liblzf-devel
    - libmemcached-devel
    - expat-devel
    - automake
    - libtool
    - mysql-devel
    - imake
    - unixODBC-devel
    - libstemmer-devel
    - GeoIP-devel
    - openldap-devel
  tags:
    - php5

- name: link so file for ldap.h
  file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
  with_items:
    - { src: /usr/lib64/libldap.so, dest: /usr/lib/libldap.so}
    - { src: /usr/lib64/libldap_r.so, dest: /usr/lib/libldap_r.so}
  tags:
    - php5

- name: "Create {{ fpm_group }} for php5"
  group:
    name: "{{ fpm_group }}"
    state: present
  tags:
    - php5

- name: "Create {{ fpm_user }} for php5"
  user:
    name: "{{ fpm_user }}"
    comment: "php user"
    create_home: no
    state: present
    group: "{{ fpm_group }}"
  tags:
    - php5

- name: Download php source package
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    checksum: "sha256:{{ item.checksum }}"
    timeout: 120
  loop:
    - { url: "{{ php5_remote_package }}", dest: "{{ php5_download_dest_dir }}", checksum: "{{ php5_checksum }}" }
  tags:
    - php5

- name: Unarchive source package
  unarchive:
    src: "{{ php5_download_dest_dir }}"
    dest: "{{ src_code_dir }}/"
    remote_src: yes
    creates: "{{ php5_installation_dir }}/configure"
  tags:
    - php5

- name: "Configure {{ php5_installation_dir }} and installation"
  shell: >
    ./configure --prefix={{ php5_installation_dir }} --enable-exif --enable-fpm --enable-mbstring --with-config-file-path={{ php5_installation_dir }}/etc/ --with-config-file-scan-dir={{ php5_installation_dir }}/etc/ini/ --with-freetype-dir --with-gd --with-jpeg-dir --with-png-dir --with-iconv-dir --with-mysql --with-mysqli --with-pdo-mysql --with-zlib --with-curl --enable-intl --with-icu-dir=/usr --with-fpm-user={{ fpm_user }} --with-fpm-group={{ fpm_user }} --with-libxml-dir --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --with-mcrypt --enable-mbregex --with-openssl --enable-soap --enable-gd-native-ttf --enable-ftp --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --with-mhash --enable-calendar --with-bz2 --with-gettext --enable-wddx --enable-opcache --enable-zip --enable-phar --with-ldap --with-ldap-sasl 
  args:
    chdir: "{{ php5_src_dir }}"
    creates: "{{ php5_src_dir }}/Makefile"
  tags:
    - php5

# - name: Append lber in Makefile for php5
#   lineinfile:
#     path: "{{ php5_src_dir }}/Makefile"
#     regexp: '^(EXTRA_LIBS.*)$'
#     line: '\1 -llber'
#     backrefs: yes
#   tags:
#     - php5

- name: Append -llber for Makefile when building php5
  shell: >
    sed -i 's/^\(EXTRA_LIBS.*\)/\1 -llber/g' Makefile && cp Makefile Makefile.done
  args:
    chdir: "{{ php5_src_dir }}"
    creates: "{{ php5_src_dir }}/Makefile.done"
  tags:
    - php5


- name: "Configure {{ php5_installation_dir }} and installation"
  shell: >
    make && make install 
  args:
    chdir: "{{ php5_src_dir }}"
    creates: "{{ php5_installation_dir }}/etc/php-fpm.conf.default"
  tags:
    - php5

- name: "Link mmseg directory: {{ php5_installation_dir }} => {{ installation_dir }}/php"
  file:
    src: "{{ php5_installation_dir }}"
    dest: "{{ installation_dir }}/php"
    state: link
    force: yes
  tags:
    - php5
# -----------------
- name: "Download the {{ coreseek_download_dest_dir }} package"
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    checksum: "sha256:{{ item.checksum }}"
    timeout: 120
  loop:
    - { url: "{{ coreseek_download_url }}", dest: "{{ coreseek_download_dest_dir }}", checksum: "{{ coreseek_checksum }}" }
  tags:
    - php5

- name: "Unarchive coreseek src"
  unarchive:
    src: "{{ coreseek_download_dest_dir }}"
    dest: "{{ src_code_dir }}/"
    remote_src: yes
    creates: "{{ coreseek_src_dir }}/README.txt"
  tags:
    - php5

- name: "Replace lines in sphinx csft file"
  replace:
    path: "{{ item.file }}"
    regexp: '{{ item.src }}'
    replace: '{{ item.dest }}'
  with_items: "{{ php_sphinx_src_lines }}"
  tags:
    - php5
    - lineinfile

- name: "Configure {{ coreseek_download_dest_dir }} mmseg"
  shell: >
    ./bootstrap && ./configure --prefix={{ installation_dir }}/mmseg-3.2.14 && make && make install
  args:
    creates: "{{ installation_dir }}/mmseg/"
    chdir: "{{ coreseek_src_dir }}/mmseg-3.2.14/"
  tags:
    - php5


- name: "Create directories"
  file:
    path: "{{ item }}"
    state: directory
    mode: 644
  with_items:
    - "{{ php5_installation_dir }}/etc/ini/"
    - "{{ php_log_dir }}"
    - "{{ php_session_tmp_dir }}"
    - "{{ php_upload_tmp_dir }}"
  tags:
    - php5


- name: "Link mmseg directory: {{ installation_dir }}/mmseg-3.2.14/ => {{ installation_dir }}/mmseg/"
  file:
    src: "{{ installation_dir }}/mmseg-3.2.14"
    dest: "{{ installation_dir }}/mmseg"
    state: link
    force: yes
  tags:
    - php5


- name: "Configure {{ coreseek_download_dest_dir }} csft"
  shell: >
    sh buildconf.sh || automake --add-missing && sh buildconf.sh && ./configure --prefix={{ installation_dir }}/csft-4.1 --without-unixodbc --with-mmseg --with-mmseg-includes={{ installation_dir }}/mmseg/include/mmseg/ --with-mmseg-libs={{ installation_dir }}/mmseg/lib/ --with-mysql --enable-id64 && make && make install
  args:
    creates: "{{ installation_dir }}/csft-4.1/bin/indexer"
    chdir: "{{ coreseek_src_dir }}/csft-4.1/"
  tags:
    - php5

- name: "Link mmseg directory: {{ installation_dir }}/csft-4.1/ => {{ installation_dir }}/csft"
  file:
    src: "{{ installation_dir }}/csft-4.1"
    dest: "{{ installation_dir }}/csft"
    state: link
    force: yes
  tags:
    - php5

- name: "Configure {{ coreseek_download_dest_dir }} libsphinxclient"
  shell: >
    sh buildconf.sh && ./configure && make && make install
  args:
    creates: "{{ installation_dir }}/lib/libsphinxclient-0.0.1.so"
    chdir: "{{ coreseek_src_dir }}/csft-4.1/api/libsphinxclient/"
  tags:
    - php5

- name: "Copy ld.so.conf files /etc/ld.so.conf.d/libsphinxclient.conf"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "libsphinxclient.conf.j2", dest: "/etc/ld.so.conf.d/libsphinxclient.conf" }
  tags:
    - php5

- name: Copy php.ini file to the installation directory
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: yes
  with_items:
    - { src: '{{ php5_src_dir }}/php.ini-production', dest: '{{ php5_installation_dir }}/etc/php.ini-production'}
    - { src: '{{ php5_installation_dir }}/etc/php.ini-production', dest: '{{ php5_installation_dir }}/etc/php.ini'}
    - { src: '{{ php5_installation_dir }}/etc/php-fpm.conf.default', dest: '{{ php5_installation_dir }}/etc/php-fpm.conf'}
    # - { src: '{{ php5_installation_dir }}/etc/php-fpm.d/www.conf.default', dest: '{{ php5_installation_dir }}/etc/php-fpm.d/www.conf'}
  tags:
    - php5

- name: "Install php extensions"
  shell: >
    echo "" | {{ php5_installation_dir }}/bin/pecl install {{ item.extension }}
  args:
    creates: "{{ item.creates }}"
  with_items: "{{ php5_extensions }}"
  tags:
    - php5


- name: Changes to the php.ini settings.
  lineinfile:
    dest: "{{ php5_installation_dir }}/etc/php.ini"
    regexp: '{{ item.source }}'
    line: '{{ item.dest }}'
    backrefs: yes
  with_items: "{{ php5_ini_config_lines }}"
  tags:
    - php5


- name: Copy additional ini files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "additions.ini.j2", dest: "{{ php5_installation_dir }}/etc/ini/additions.ini" }
    - { src: "php-fpm.service.j2", dest: "/usr/lib/systemd/system/php-fpm.service" }
    - { src: 'php-fpm.env.j2', dest: '/etc/sysconfig/php-fpm' }
  notify:
    - restart php-fpm
  tags:
    - php5

- name: Start php-fpm service
  systemd:
    name: php-fpm
    state: started
    daemon_reload: yes
    enabled: yes
  tags:
    - php5
